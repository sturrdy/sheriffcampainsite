import { useState, useMemo, useCallback } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { Checkbox } from "@/components/ui/checkbox";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { 
  Download, Users, Heart, ClipboardList, Mail, Search, Calendar, DollarSign, 
  MapPin, Phone, Edit, Trash2, Filter, SortAsc, SortDesc, CheckSquare, 
  Square, MoreHorizontal, Eye, Copy, ExternalLink, Zap, TrendingUp,
  Clock, Target, FileText, BarChart3, Settings
} from "lucide-react";
// Date utility functions
const formatDate = (date, formatStr = "MMM dd, yyyy") => {
  const d = new Date(date);
  const options = {
    "MMM dd, yyyy": { month: 'short', day: 'numeric', year: 'numeric' },
    "MM/dd/yyyy HH:mm": { month: '2-digit', day: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' },
    "yyyy-MM-dd": { year: 'numeric', month: '2-digit', day: '2-digit' }
  };
  return d.toLocaleDateString('en-US', options[formatStr] || options["MMM dd, yyyy"]);
};

const subDays = (date, days) => {
  const result = new Date(date);
  result.setDate(result.getDate() - days);
  return result;
};

const isAfter = (date, compareDate) => new Date(date) > new Date(compareDate);

// Mock data for demonstration
const mockVolunteers = [
  { id: 1, name: "Sarah Johnson", email: "sarah@email.com", phone: "(555) 123-4567", interests: ["Door knocking", "Phone banking"], createdAt: new Date("2024-01-15"), status: "active", lastContact: new Date("2024-05-20") },
  { id: 2, name: "Mike Chen", email: "mike@email.com", phone: "(555) 234-5678", interests: ["Event organizing", "Social media"], createdAt: new Date("2024-02-10"), status: "active", lastContact: new Date("2024-05-25") },
  { id: 3, name: "Lisa Rodriguez", email: "lisa@email.com", phone: "(555) 345-6789", interests: ["Phone banking"], createdAt: new Date("2024-01-05"), status: "inactive", lastContact: new Date("2024-04-10") },
  { id: 4, name: "David Wilson", email: "david@email.com", phone: "", interests: ["Door knocking", "Event organizing"], createdAt: new Date("2024-03-01"), status: "active", lastContact: new Date("2024-05-28") },
];

const mockYardSigns = [
  { id: 1, name: "Jennifer Brown", email: "jen@email.com", phone: "(555) 456-7890", address: "123 Main St, Walker County", quantity: 2, createdAt: new Date("2024-05-15"), status: "pending" },
  { id: 2, name: "Robert Taylor", email: "robert@email.com", phone: "(555) 567-8901", address: "456 Oak Ave, Walker County", quantity: 1, createdAt: new Date("2024-05-20"), status: "delivered" },
  { id: 3, name: "Maria Garcia", email: "maria@email.com", phone: "", address: "789 Pine Rd, Walker County", quantity: 3, createdAt: new Date("2024-05-25"), status: "pending" },
];

const mockDonations = [
  { id: 1, email: "donor1@email.com", amount: 5000, status: "succeeded", stripePaymentIntentId: "pi_1234567890", createdAt: new Date("2024-05-01") },
  { id: 2, email: "donor2@email.com", amount: 2500, status: "succeeded", stripePaymentIntentId: "pi_1234567891", createdAt: new Date("2024-05-10") },
  { id: 3, email: "donor3@email.com", amount: 10000, status: "failed", stripePaymentIntentId: "pi_1234567892", createdAt: new Date("2024-05-15") },
];

const mockNewsletter = [
  { id: 1, email: "subscriber1@email.com", createdAt: new Date("2024-04-01") },
  { id: 2, email: "subscriber2@email.com", createdAt: new Date("2024-05-01") },
  { id: 3, email: "subscriber3@email.com", createdAt: new Date("2024-05-15") },
];

export default function OptimizedAdminDashboard() {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedItems, setSelectedItems] = useState(new Set());
  const [sortField, setSortField] = useState("createdAt");
  const [sortDirection, setSortDirection] = useState("desc");
  const [statusFilter, setStatusFilter] = useState("all");
  const [dateFilter, setDateFilter] = useState("all");
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
  const [quickActions, setQuickActions] = useState(false);

  // Simulated data - in real app these would come from your queries
  const volunteers = mockVolunteers;
  const yardSignRequests = mockYardSigns;
  const donations = mockDonations;
  const newsletterSubscriptions = mockNewsletter;

  // Advanced filtering and sorting logic
  const filterAndSortData = useCallback((data, searchFields, type) => {
    let filtered = [...data];

    // Search filter
    if (searchTerm) {
      filtered = filtered.filter(item =>
        searchFields.some(field =>
          item[field]?.toString().toLowerCase().includes(searchTerm.toLowerCase())
        )
      );
    }

    // Status filter
    if (statusFilter !== "all" && type === "volunteers") {
      filtered = filtered.filter(item => item.status === statusFilter);
    }

    // Date filter
    if (dateFilter !== "all") {
      const cutoffDate = subDays(new Date(), 
        dateFilter === "week" ? 7 : 
        dateFilter === "month" ? 30 : 
        dateFilter === "quarter" ? 90 : 0
      );
      filtered = filtered.filter(item => isAfter(new Date(item.createdAt), cutoffDate));
    }

    // Sorting
    filtered.sort((a, b) => {
      let aVal = a[sortField];
      let bVal = b[sortField];
      
      if (aVal instanceof Date) aVal = aVal.getTime();
      if (bVal instanceof Date) bVal = bVal.getTime();
      
      if (typeof aVal === 'string') aVal = aVal.toLowerCase();
      if (typeof bVal === 'string') bVal = bVal.toLowerCase();
      
      if (sortDirection === "asc") {
        return aVal > bVal ? 1 : -1;
      } else {
        return aVal < bVal ? 1 : -1;
      }
    });

    return filtered;
  }, [searchTerm, statusFilter, dateFilter, sortField, sortDirection]);

  // Bulk operations
  const handleBulkDelete = () => {
    console.log("Bulk deleting:", Array.from(selectedItems));
    setSelectedItems(new Set());
  };

  const handleBulkExport = () => {
    console.log("Bulk exporting:", Array.from(selectedItems));
  };

  const toggleItemSelection = (id) => {
    const newSelection = new Set(selectedItems);
    if (newSelection.has(id)) {
      newSelection.delete(id);
    } else {
      newSelection.add(id);
    }
    setSelectedItems(newSelection);
  };

  const toggleAllSelection = (items) => {
    if (selectedItems.size === items.length) {
      setSelectedItems(new Set());
    } else {
      setSelectedItems(new Set(items.map(item => item.id)));
    }
  };

  // Enhanced CSV export with selected items
  const exportToCSV = (data, filename, headers, selectedOnly = false) => {
    const exportData = selectedOnly ? 
      data.filter(item => selectedItems.has(item.id)) : 
      data;
    
    const csvContent = [
      headers.join(","),
      ...exportData.map(row => headers.map(header => {
        const key = header.toLowerCase().replace(/\s+/g, "");
        let value = row[key] || "";
        if (Array.isArray(value)) value = value.join("; ");
        if (value instanceof Date) value = format(value, "MM/dd/yyyy HH:mm");
        return `"${value}"`;
      }).join(","))
    ].join("\n");

    const blob = new Blob([csvContent], { type: "text/csv" });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${filename}-${format(new Date(), "yyyy-MM-dd")}.csv`;
    a.click();
    window.URL.revokeObjectURL(url);
  };

  // Enhanced stats with trends
  const totalDonationAmount = donations
    .filter(d => d.status === "succeeded")
    .reduce((sum, d) => sum + d.amount, 0) / 100;

  const recentVolunteers = volunteers.filter(v => 
    isAfter(new Date(v.createdAt), subDays(new Date(), 7))
  ).length;

  const stats = [
    {
      title: "Total Volunteers",
      value: volunteers.length,
      change: `+${recentVolunteers} this week`,
      icon: Users,
      color: "text-blue-600",
      trend: "up"
    },
    {
      title: "Yard Sign Requests",
      value: yardSignRequests.length,
      change: `${yardSignRequests.filter(y => y.status === "pending").length} pending`,
      icon: ClipboardList,
      color: "text-green-600",
      trend: "up"
    },
    {
      title: "Total Donations",
      value: `$${totalDonationAmount.toFixed(2)}`,
      change: `${donations.filter(d => d.status === "succeeded").length} successful`,
      icon: DollarSign,
      color: "text-red-600",
      trend: "up"
    },
    {
      title: "Newsletter Subscribers",
      value: newsletterSubscriptions.length,
      change: `${newsletterSubscriptions.filter(n => 
        isAfter(new Date(n.createdAt), subDays(new Date(), 30))
      ).length} this month`,
      icon: Mail,
      color: "text-purple-600",
      trend: "up"
    },
  ];

  const filteredVolunteers = useMemo(() => 
    filterAndSortData(volunteers, ["name", "email", "phone"], "volunteers"), 
    [volunteers, filterAndSortData]
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Enhanced Header */}
        <div className="mb-8 flex justify-between items-start">
          <div>
            <h1 className="text-4xl font-bold text-gray-900 mb-2 flex items-center">
              <Zap className="h-8 w-8 text-blue-600 mr-3" />
              Campaign Command Center
            </h1>
            <p className="text-gray-600">Nick Smith for Walker County Sheriff - Advanced Data Management</p>
          </div>
          <div className="flex space-x-2">
            <Button variant="outline" size="sm">
              <Settings className="h-4 w-4 mr-2" />
              Settings
            </Button>
            <Button variant="outline" size="sm">
              <BarChart3 className="h-4 w-4 mr-2" />
              Analytics
            </Button>
          </div>
        </div>

        {/* Enhanced Stats Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {stats.map((stat, index) => {
            const IconComponent = stat.icon;
            return (
              <Card key={index} className="hover:shadow-lg transition-shadow border-l-4 border-l-blue-500">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">{stat.title}</CardTitle>
                  <div className="flex items-center space-x-2">
                    <IconComponent className={`h-4 w-4 ${stat.color}`} />
                    {stat.trend === "up" && <TrendingUp className="h-3 w-3 text-green-500" />}
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold mb-1">{stat.value}</div>
                  <p className="text-xs text-gray-600">{stat.change}</p>
                </CardContent>
              </Card>
            );
          })}
        </div>

        {/* Advanced Search and Filters */}
        <Card className="mb-6">
          <CardContent className="pt-6">
            <div className="flex flex-col lg:flex-row gap-4">
              <div className="flex-1 relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <Input
                  placeholder="Search by name, email, address, or any field..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
              
              <div className="flex gap-2">
                <Select value={statusFilter} onValueChange={setStatusFilter}>
                  <SelectTrigger className="w-32">
                    <SelectValue placeholder="Status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Status</SelectItem>
                    <SelectItem value="active">Active</SelectItem>
                    <SelectItem value="inactive">Inactive</SelectItem>
                  </SelectContent>
                </Select>

                <Select value={dateFilter} onValueChange={setDateFilter}>
                  <SelectTrigger className="w-32">
                    <SelectValue placeholder="Date" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Time</SelectItem>
                    <SelectItem value="week">This Week</SelectItem>
                    <SelectItem value="month">This Month</SelectItem>
                    <SelectItem value="quarter">This Quarter</SelectItem>
                  </SelectContent>
                </Select>

                <Button
                  variant="outline"
                  onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
                >
                  <Filter className="h-4 w-4 mr-2" />
                  Filters
                </Button>
              </div>
            </div>

            {showAdvancedFilters && (
              <div className="mt-4 p-4 bg-gray-50 rounded-lg">
                <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
                  <div>
                    <label className="text-sm font-medium">Sort by</label>
                    <Select value={sortField} onValueChange={setSortField}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="createdAt">Date Created</SelectItem>
                        <SelectItem value="name">Name</SelectItem>
                        <SelectItem value="email">Email</SelectItem>
                        <SelectItem value="lastContact">Last Contact</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium">Direction</label>
                    <Select value={sortDirection} onValueChange={setSortDirection}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="desc">Newest First</SelectItem>
                        <SelectItem value="asc">Oldest First</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Bulk Actions Bar */}
        {selectedItems.size > 0 && (
          <Card className="mb-6 border-blue-200 bg-blue-50">
            <CardContent className="py-4">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium text-blue-800">
                  {selectedItems.size} item{selectedItems.size !== 1 ? 's' : ''} selected
                </span>
                <div className="flex space-x-2">
                  <Button size="sm" variant="outline" onClick={handleBulkExport}>
                    <Download className="h-4 w-4 mr-2" />
                    Export Selected
                  </Button>
                  <Button size="sm" variant="outline" onClick={() => setQuickActions(!quickActions)}>
                    <MoreHorizontal className="h-4 w-4 mr-2" />
                    More Actions
                  </Button>
                  <AlertDialog>
                    <AlertDialogTrigger asChild>
                      <Button size="sm" variant="destructive">
                        <Trash2 className="h-4 w-4 mr-2" />
                        Delete Selected
                      </Button>
                    </AlertDialogTrigger>
                    <AlertDialogContent>
                      <AlertDialogHeader>
                        <AlertDialogTitle>Delete Selected Items</AlertDialogTitle>
                        <AlertDialogDescription>
                          Are you sure you want to delete {selectedItems.size} item{selectedItems.size !== 1 ? 's' : ''}? This action cannot be undone.
                        </AlertDialogDescription>
                      </AlertDialogHeader>
                      <AlertDialogFooter>
                        <AlertDialogCancel>Cancel</AlertDialogCancel>
                        <AlertDialogAction onClick={handleBulkDelete} className="bg-red-600 hover:bg-red-700">
                          Delete {selectedItems.size} Item{selectedItems.size !== 1 ? 's' : ''}
                        </AlertDialogAction>
                      </AlertDialogFooter>
                    </AlertDialogContent>
                  </AlertDialog>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Enhanced Data Tables */}
        <Tabs defaultValue="volunteers" className="space-y-4">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="volunteers" className="flex items-center">
              <Users className="h-4 w-4 mr-2" />
              Volunteers ({volunteers.length})
            </TabsTrigger>
            <TabsTrigger value="yard-signs" className="flex items-center">
              <ClipboardList className="h-4 w-4 mr-2" />
              Yard Signs ({yardSignRequests.length})
            </TabsTrigger>
            <TabsTrigger value="donations" className="flex items-center">
              <DollarSign className="h-4 w-4 mr-2" />
              Donations ({donations.length})
            </TabsTrigger>
            <TabsTrigger value="newsletter" className="flex items-center">
              <Mail className="h-4 w-4 mr-2" />
              Newsletter ({newsletterSubscriptions.length})
            </TabsTrigger>
          </TabsList>

          {/* Enhanced Volunteers Tab */}
          <TabsContent value="volunteers">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between">
                <div>
                  <CardTitle className="flex items-center">
                    <Users className="h-5 w-5 mr-2" />
                    Volunteer Management
                  </CardTitle>
                  <CardDescription>
                    Campaign volunteers with advanced management tools
                  </CardDescription>
                </div>
                <div className="flex space-x-2">
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => toggleAllSelection(filteredVolunteers)}
                  >
                    {selectedItems.size === filteredVolunteers.length ? (
                      <CheckSquare className="h-4 w-4 mr-2" />
                    ) : (
                      <Square className="h-4 w-4 mr-2" />
                    )}
                    Select All
                  </Button>
                  <Button
                    onClick={() => exportToCSV(
                      filteredVolunteers,
                      "volunteers",
                      ["Name", "Email", "Phone", "Interests", "Status", "CreatedAt"]
                    )}
                    className="flex items-center space-x-2"
                  >
                    <Download className="h-4 w-4" />
                    <span>Export All</span>
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {filteredVolunteers.map((volunteer) => (
                    <div 
                      key={volunteer.id} 
                      className={`border rounded-lg p-4 transition-all hover:shadow-md ${
                        selectedItems.has(volunteer.id) ? 'border-blue-300 bg-blue-50' : 'border-gray-200'
                      }`}
                    >
                      <div className="flex items-start space-x-4">
                        <Checkbox
                          checked={selectedItems.has(volunteer.id)}
                          onCheckedChange={() => toggleItemSelection(volunteer.id)}
                          className="mt-1"
                        />
                        
                        <div className="flex-1">
                          <div className="flex justify-between items-start">
                            <div className="flex-1">
                              <div className="flex items-center space-x-3 mb-2">
                                <h4 className="font-semibold text-lg">{volunteer.name}</h4>
                                <Badge 
                                  variant={volunteer.status === "active" ? "default" : "secondary"}
                                  className={volunteer.status === "active" ? "bg-green-100 text-green-800" : ""}
                                >
                                  {volunteer.status}
                                </Badge>
                              </div>
                              
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-gray-600">
                                <div className="flex items-center space-x-2">
                                  <Mail className="h-4 w-4" />
                                  <span>{volunteer.email}</span>
                                  <Button size="sm" variant="ghost" className="h-6 w-6 p-0">
                                    <Copy className="h-3 w-3" />
                                  </Button>
                                </div>
                                
                                {volunteer.phone && (
                                  <div className="flex items-center space-x-2">
                                    <Phone className="h-4 w-4" />
                                    <span>{volunteer.phone}</span>
                                  </div>
                                )}
                                
                                <div className="flex items-center space-x-2">
                                  <Calendar className="h-4 w-4" />
                                  <span>Joined {formatDate(volunteer.createdAt)}</span>
                                </div>
                                
                                <div className="flex items-center space-x-2">
                                  <Clock className="h-4 w-4" />
                                  <span>Last contact {formatDate(volunteer.lastContact, "MMM dd")}</span>
                                </div>
                              </div>
                              
                              <div className="flex flex-wrap gap-1 mt-3">
                                {volunteer.interests?.map((interest, index) => (
                                  <Badge key={index} variant="outline" className="text-xs">
                                    <Target className="h-3 w-3 mr-1" />
                                    {interest}
                                  </Badge>
                                ))}
                              </div>
                            </div>

                            <div className="flex space-x-1">
                              <Button size="sm" variant="ghost" title="View Details">
                                <Eye className="h-4 w-4" />
                              </Button>
                              <Button size="sm" variant="ghost" title="Edit">
                                <Edit className="h-4 w-4" />
                              </Button>
                              <Button size="sm" variant="ghost" title="Contact">
                                <Mail className="h-4 w-4" />
                              </Button>
                              <AlertDialog>
                                <AlertDialogTrigger asChild>
                                  <Button size="sm" variant="ghost" title="Delete">
                                    <Trash2 className="h-4 w-4 text-red-500" />
                                  </Button>
                                </AlertDialogTrigger>
                                <AlertDialogContent>
                                  <AlertDialogHeader>
                                    <AlertDialogTitle>Delete Volunteer</AlertDialogTitle>
                                    <AlertDialogDescription>
                                      Are you sure you want to delete {volunteer.name}? This action cannot be undone.
                                    </AlertDialogDescription>
                                  </AlertDialogHeader>
                                  <AlertDialogFooter>
                                    <AlertDialogCancel>Cancel</AlertDialogCancel>
                                    <AlertDialogAction className="bg-red-600 hover:bg-red-700">
                                      Delete
                                    </AlertDialogAction>
                                  </AlertDialogFooter>
                                </AlertDialogContent>
                              </AlertDialog>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                
                {filteredVolunteers.length === 0 && (
                  <div className="text-center py-12">
                    <Users className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                    <h3 className="text-lg font-medium text-gray-900 mb-2">No volunteers found</h3>
                    <p className="text-gray-600">Try adjusting your search or filter criteria.</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Other tabs would follow similar enhanced pattern */}
          <TabsContent value="yard-signs">
            <Card>
              <CardHeader>
                <CardTitle>Yard Sign Requests - Enhanced View Coming Soon</CardTitle>
                <CardDescription>Similar enhancements will be applied to all tabs</CardDescription>
              </CardHeader>
            </Card>
          </TabsContent>

          <TabsContent value="donations">
            <Card>
              <CardHeader>
                <CardTitle>Donation Management - Enhanced View Coming Soon</CardTitle>
                <CardDescription>Similar enhancements will be applied to all tabs</CardDescription>
              </CardHeader>
            </Card>
          </TabsContent>

          <TabsContent value="newsletter">
            <Card>
              <CardHeader>
                <CardTitle>Newsletter Management - Enhanced View Coming Soon</CardTitle>
                <CardDescription>Similar enhancements will be applied to all tabs</CardDescription>
              </CardHeader>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}